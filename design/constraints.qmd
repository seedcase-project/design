---
title: "Constraints"
---

This document lists technical, political/organizational,

Any requirement that constrains software architects in their freedom of
design and implementation decisions or decision about the development
process. These constraints sometimes go beyond individual systems and
are valid for whole organizations and companies.

Anything that constrains teams in design and implementation decisions,
or decision about related processes. Constraints can sometimes go beyond
individual systems and might valid for whole organizations and companies
(e.g. company-wide technology choices or government regulations). Time
and money are common constraints in many organizations. You should
clarify the consequences of constraints, e.g. resulting (additional)
costs or effort.

The main "philosophical" and value-based constraints are described in
the [Guiding Principles](/design/introduction.qmd#guiding-principles)
section. These form the basis for all other decisions and designs.

## Technical constraints

| Constraints                                       | Background/Motivation |
|---------------------------------------------------|-----------------------|
| Run on Windows, MacOS, and Linux                  |                       |
| Use open source software dependencies             |                       |
| Use software that's (relatively) familiar to many |                       |
| Integrate GDPR, privacy, and security compliance  |                       |
| Deployable to servers                             |                       |

### Computating and storage locations

## Computational and physical infrastructure

While the proposed framework is software-based, storing and deploying
the infrastructure requires server space and IT support. The framework
itself takes up little space and can optimise computational resources,
but the underlying DD2 data requires considerable server space.

## Organizational constraints

| Constraints                     | Background/Motivation |
|---------------------------------|-----------------------|
| Time schedule                   |                       |
| Resources                       |                       |
| Small team                      |                       |
| Limited knowledge/skill support |                       |
| Use open source license         |                       |

## Political/legal constraints

| Constraints             | Background/Motivation |
|-------------------------|-----------------------|
| Use open source license |                       |

## Conventions

| Conventions                         | Background/Motivation |
|-------------------------------------|-----------------------|
| Follow standard styling (e.g. PIP3) |                       |
| Follow [CalVer]() versioning        |                       |

conventions (e.g. programming or versioning guidelines, documentation or
naming conventions)

(e.g., programming guidelines, documentation-, naming- or organisational
conventions).

Content

Motivation

Architects should know exactly where they are free in their design
decisions and where they must adhere to constraints. Constraints must
always be dealt with; they may be negotiable, though.

Form

If constraints bring unreasonable consequences (e.g., can only be
satisfied with excessively high costs), you should negotiate about them
with the relevant stakeholders.

Sometimes such constraints relate to development processes, third party
contracting or legal concerns. Discuss them with your management.

In addition to the organisational constraints (see tip 2-3), technical
contraints will probably apply as well to the design and development of
your system. That can be guidelines from the managements or the
organisation itself regarding hardware, operations, technology
selection, use of products, frameworks or reference architectures.

If necessary, differentiate between technical, organizational and
political constraints or overlapping conventions
