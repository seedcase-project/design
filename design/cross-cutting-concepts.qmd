# Cross-cutting concepts

{{< include ../includes/_wip.qmd >}}

## Security

The Seedcase Product itself does not contain any personal data. When
Seedcase is deployed as an infrastructure for a database, only aggregate
statistics, and not individual-level personal data, would be publicly
accessible. Any personal data would be stored on a secure server that is
decided and controlled by User 4, who would be responsible for complying
with relevant legal requirements.

For data transfers of personal data, either from data collection
centers, data generated from researchers, or when transferring data for
approved projects, we would use well-established and compliant encrypted
data transfer processes. Key authentication principles such as
two-factor authentication and OAuth (open standard for access
authentication) will be central to the framework to control who can
update or transfer the data. The endpoint of the data transfer is dealt
with by the legal teams of the relevant institutions.

Diagram showing layers for security and privilege.

## API security

Adding a security layer to an API is crucial for ensuring the
confidentiality, integrity, and availability of the data and systems
that use the API. APIs are often used to connect different systems and
applications, and they provide a way for external parties to access and
interact with data. Because of this, they can be an attractive target
for cyber attackers looking to gain unauthorized access, steal sensitive
information, or disrupt service availability. To protect against these
threats, it is important to implement a robust security strategy for the
API.

### Approach 1: Basic Authentication

Basic Authentication is a simple authentication scheme used by APIs to
authenticate users based on a username and password. In this scheme, the
user's credentials are encoded in a Base64-encoded string and included
in the HTTP Authorization header of each request.The server verifies the
credentials and either grants or denies access to the requested
resource.

Here is an example for setting up with basic user name password for API
request

```         
class SecureView(APIView):
    """ Setup secure view of the API with basic authentication """
    authentication_classes = (BasicAuthentication,)
    permission_classes = (IsAuthenticated,)
```

When make API request need to include the correct username and password

```         
base_url = 'http://example.com/api'
username = 'username'
password = 'password'

# Encode the credentials
credentials = base64.b64encode(f"{username}:{password}".encode()).decode()

# Set the 'Authorization' header to the encoded credentials
headers = {'Authorization': 'Basic ' + credentials}

# Make the GET request
response = requests.get(base_url + '/secure-view/', headers=headers)
```

### Approach 2: User Token for API requests

User Token is a type of authentication token used by APIs to
authenticate and authorize user requests. When a user logs in, the API
generates a unique token for that user, which is then stored securely on
the client side (seedcase box). User Tokens are more secure than Basic
Authentication because they are not transmitted in plaintext and can be
set to expire after a certain period of time, forcing the user to log in
again to obtain a new token. They can also be revoked by the server if
the user's access needs to be terminated.

Here is an example for setting up and token class for API requests
(python)

```         
class Token():
    """ Access token for API requests."""

    # who created the token
    user_name = models.CharField()

    # token field
    # Use generate token function to create random string
    token = models.CharField()

    # This identifies the project or dataset which will be using this token.
    token_associated_app = models.CharField()

    def generate_token(self):
        """ populates the token with a random string. """

        charset_string = string.ascii_uppercase + string.ascii_lowercase + string.digits
        random_string = ''.join([
            random.SystemRandom().choice(charset_string)
            for _ in range(TOKEN_LENGTH)
        ])
        log.info('regenerate_token: updated token for %s', self.client_name)
        self.token = random_string
        self.save()

    def project_associated_with_token(self, project_name):
        """
        Verify if the token is associated with the provided app
        """
        if self.token_associated_app == project_name:
            return True
        return False
```

When make API request need to include the correct token as the header

```         
base_url = 'http://example.com/api'
header = { 'Authorization': 'Bearer ' + TOKEN }
```

### Approach 3: OAuth

Use OAuth approach is more complicated compared to previously two. Here
are some basic steps.

1.  User request access to the project data of the seedcase.
2.  Seedcase redirect the OAuth server (e.g.Â Shib-Identity-Provider)
3.  OAuth Server authenticates user by username and password.
4.  OAuth Server sends secret key back the seedcase
5.  Seedcase used the secret key from OAuth server provide correct
    authorization of the user for accessing the data \## API security

## Privacy

The Seedcase Product itself does not contain any data that requires
considering privacy concerns. However, Seedcase will be used to manage
data and has two main privacy concerns: privacy related to the data that
is entered into the Data Resource; and privacy with the people working
on a subset of the data from the Data Resource handled by Seedcase (the
data project).

The Seedcase Product will allow setting up multiple layers of user
access and authorization levels to the Data Resource instance. As
default there will be an administrator who will have access to
everything to do with user roles and permissions. In principle it should
be possible for that user to set Seedcase up in a way that they
themselves cannot view any of the uploaded data, but this will not be a
standard setup.

The database back end will hold all information about users and their
permissions. This is done by allowing the administrator to assign an
individual user to either roles or groups, some of which will come
pre-defined. It should also be possible for an administrator to create
their own roles and groups based on the people working on a particular
project that is using the Seedcase Product to handle their data.

The Seedcase Product will ship with the following user roles pre-defined
to make it easier for the data project administrator to ensure the
security and privacy of the data entered into the system.

-   **Administrator**: Initial user, will as a standard be assigned
    permissions to do everything in the database. Create, read, update,
    and delete (CRUD) permissions on data, database objects, and users
    (including assigning other users to Administrator role).

-   **Administrator light (CRUD of data)**: A user assigned this role
    will have full CRUD permission on data, but not on user permissions,
    tables, or other database objects.

-   **Views only**: Likely to be a way of connecting specific users with
    specific views created on the data contained in the database. These
    views would be created by someone with a type of administrator role.

-   **Data create-update**: A user with permission to enter data, and to
    view the data that they have entered in the past.

-   **DBMS viewer (read of data and database structure)**: Role for data
    managers who would like to connect to the database using a Database
    Management System. The role will allow for a DBMS to view the
    structure of the database as well as the data in the tables.

There will be other pre-defined roles, but those will be for the
interaction between the back end and front end and mainly coded into the
APIs. The above roles should be used by activated users.

## Legal

Seedcase will have the MIT license (see the section on [Why choose a MIT
License](/design/decisions/why-license/) for more info). We will also be
using a Developer Certification of Origin (DCO) for anyone developing
and submitting code from outside the core project team. This will be
implemented using [GitHub App DCO](https://github.com/apps/dco). The
licence text itself is available
[here](https://developercertificate.org).

<!-- TODO: Add more about legal around data. -->

## User permission levels

| Task                                       | Admin | Data Request | Data Entry | Third Party |
|--------------------------------------------|-------|--------------|------------|-------------|
| Create, update, delete users               | Y     |              |            |             |
| Create, update, delete tables              | Y     |              |            |             |
| Create, update, delete metadata            | Y     |              |            |             |
| Read metadata                              | Y     | Y            | Y          | Y           |
| Comment on/ask about metadata              | Y     | Y            | Y          | Y           |
| Read information on existing data projects | Y     | Y            | Y          | Y           |
| Create new data projects                   | Y     | Y            |            |             |
| Edit existing data projects                | Y     | Y            |            |             |
| Approve new data projects                  | Y     |              |            |             |
| Add tables to handle new data              | Y     |              |            |             |
| Add metadata on new data                   | Y     |              |            |             |
| Add data to existing tables                | Y     |              | Y          |             |

: Permission levels for tasks given to each user type.

## Computational and storage locations

Considering that Seedcase aim is to simplify structuring and working
with data, we need to clarify and consider that the locations where data
stored and where data is analyzed may be different. These are the
possible combinations described in @tbl-data-analysis-locations.

| Storage | Analysis         |
|---------|------------------|
| Server  | Same server      |
| Server  | Different server |
| Server  | Local            |
| Local   | Local            |
| Local   | Server           |

: Potential combinations where data is stored vs where analysis is done.
'Local' would be the computer itself, while 'server' is an external set
of computers (online or connected internally).
{#tbl-data-analysis-locations}

If the data owners are the same people as the data analysts (for
instance, within a research group), the data and analysis location could
be the same. If the data analysts are external to the owners, the
locations will likely be different. The consequences of these different
combinations is that we need to design Seedcase to be flexible to these
scenarios.
