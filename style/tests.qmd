---
title: "Writing Python tests"
description: "Guidelines on how to write tests for our Python code"
---

{{< include /includes/_wip.qmd >}}

## What to write tests for

Write tests for:

- Every function, class, and method.
- Every possible input and output.
- Every possible error within the function.

## How to write tests

### Test location

We use [pytest](https://docs.pytest.org/en/stable/) for testing our
Python code and keep the [tests outside the application
code](https://docs.pytest.org/en/stable/explanation/goodpractices.html#tests-outside-application-code)
in a `tests` directory, like so:

``` plaintext
sprout/
├── core/
│   ├── my_function.py
├── tests/
│   ├── test_my_function.py
```

### Test files

Make one test file per Python script and only test the functions within
that script. This makes it easier to do a cycle of writing and testing,
since you only need to run the one test file and not all the tests.

Always name the test file the same as the Python script, but with
`test_` as a prefix. E.g., `my_function.py` --\> `test_my_function.py`.

### Test names

Use the following general pattern for naming tests:

- `test_<action>_<condition>`. E.g.,
    `test_returns_relative_path_with_multi_digits` or
    `test_rejects_unsupported_format`.
- If there are multiple functions in the same script, you can include
    the function name in the test name:
    `test_<function>_<action>_<condition>`.

### Test structure

Use the following general structure for tests:

1.  Given: Set up the test data and any other necessary conditions.
2.  When: Call the function or method being tested.
3.  Then: Check the output of the function or method.

This is sometimes called "Arrange, act, assert".

If tests are short and very simple, you don't have to use these sections
explicitly. But as tests get longer and more complex, it can be
helpful - for reviewers and your future self - to include them.

Keep the tests as simple as possible and only test one thing at a time.
If you need to test multiple things, write multiple tests.

To avoid repeating yourself, use [parameterized
tests](https://docs.pytest.org/en/7.1.x/how-to/parametrize.html) to test
multiple inputs and outputs with the same test function.
